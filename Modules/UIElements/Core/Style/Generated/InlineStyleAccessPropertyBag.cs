// Unity C# reference source
// Copyright (c) Unity Technologies. For terms of use, see
// https://unity3d.com/legal/licenses/Unity_Reference_Only_License

/******************************************************************************/
//
//                             DO NOT MODIFY
//          This file has been generated by the UIElementsGenerator tool
//              See InlineStyleAccessPropertyBagCsGenerator class for details
//
/******************************************************************************/
using System.Collections.Generic;
using Unity.Properties;

namespace UnityEngine.UIElements
{
    internal partial class InlineStyleAccessPropertyBag
    {
        class AlignContentProperty : InlineStyleEnumProperty<Align>
        {
            public override string Name => nameof(IStyle.alignContent);
            public override string ussName => "align-content";
            public override bool IsReadOnly => false;
            public override StyleEnum<Align> GetValue(ref InlineStyleAccess container) => ((IStyle)container).alignContent;
            public override void SetValue(ref InlineStyleAccess container, StyleEnum<Align> value) => ((IStyle)container).alignContent = value;
        }

        class AlignItemsProperty : InlineStyleEnumProperty<Align>
        {
            public override string Name => nameof(IStyle.alignItems);
            public override string ussName => "align-items";
            public override bool IsReadOnly => false;
            public override StyleEnum<Align> GetValue(ref InlineStyleAccess container) => ((IStyle)container).alignItems;
            public override void SetValue(ref InlineStyleAccess container, StyleEnum<Align> value) => ((IStyle)container).alignItems = value;
        }

        class AlignSelfProperty : InlineStyleEnumProperty<Align>
        {
            public override string Name => nameof(IStyle.alignSelf);
            public override string ussName => "align-self";
            public override bool IsReadOnly => false;
            public override StyleEnum<Align> GetValue(ref InlineStyleAccess container) => ((IStyle)container).alignSelf;
            public override void SetValue(ref InlineStyleAccess container, StyleEnum<Align> value) => ((IStyle)container).alignSelf = value;
        }

        class BackgroundColorProperty : InlineStyleColorProperty
        {
            public override string Name => nameof(IStyle.backgroundColor);
            public override string ussName => "background-color";
            public override bool IsReadOnly => false;
            public override StyleColor GetValue(ref InlineStyleAccess container) => ((IStyle)container).backgroundColor;
            public override void SetValue(ref InlineStyleAccess container, StyleColor value) => ((IStyle)container).backgroundColor = value;
        }

        class BackgroundImageProperty : InlineStyleBackgroundProperty
        {
            public override string Name => nameof(IStyle.backgroundImage);
            public override string ussName => "background-image";
            public override bool IsReadOnly => false;
            public override StyleBackground GetValue(ref InlineStyleAccess container) => ((IStyle)container).backgroundImage;
            public override void SetValue(ref InlineStyleAccess container, StyleBackground value) => ((IStyle)container).backgroundImage = value;
        }

        class BackgroundPositionXProperty : InlineStyleBackgroundPositionProperty
        {
            public override string Name => nameof(IStyle.backgroundPositionX);
            public override string ussName => "background-position-x";
            public override bool IsReadOnly => false;
            public override StyleBackgroundPosition GetValue(ref InlineStyleAccess container) => ((IStyle)container).backgroundPositionX;
            public override void SetValue(ref InlineStyleAccess container, StyleBackgroundPosition value) => ((IStyle)container).backgroundPositionX = value;
        }

        class BackgroundPositionYProperty : InlineStyleBackgroundPositionProperty
        {
            public override string Name => nameof(IStyle.backgroundPositionY);
            public override string ussName => "background-position-y";
            public override bool IsReadOnly => false;
            public override StyleBackgroundPosition GetValue(ref InlineStyleAccess container) => ((IStyle)container).backgroundPositionY;
            public override void SetValue(ref InlineStyleAccess container, StyleBackgroundPosition value) => ((IStyle)container).backgroundPositionY = value;
        }

        class BackgroundRepeatProperty : InlineStyleBackgroundRepeatProperty
        {
            public override string Name => nameof(IStyle.backgroundRepeat);
            public override string ussName => "background-repeat";
            public override bool IsReadOnly => false;
            public override StyleBackgroundRepeat GetValue(ref InlineStyleAccess container) => ((IStyle)container).backgroundRepeat;
            public override void SetValue(ref InlineStyleAccess container, StyleBackgroundRepeat value) => ((IStyle)container).backgroundRepeat = value;
        }

        class BackgroundSizeProperty : InlineStyleBackgroundSizeProperty
        {
            public override string Name => nameof(IStyle.backgroundSize);
            public override string ussName => "background-size";
            public override bool IsReadOnly => false;
            public override StyleBackgroundSize GetValue(ref InlineStyleAccess container) => ((IStyle)container).backgroundSize;
            public override void SetValue(ref InlineStyleAccess container, StyleBackgroundSize value) => ((IStyle)container).backgroundSize = value;
        }

        class BorderBottomColorProperty : InlineStyleColorProperty
        {
            public override string Name => nameof(IStyle.borderBottomColor);
            public override string ussName => "border-bottom-color";
            public override bool IsReadOnly => false;
            public override StyleColor GetValue(ref InlineStyleAccess container) => ((IStyle)container).borderBottomColor;
            public override void SetValue(ref InlineStyleAccess container, StyleColor value) => ((IStyle)container).borderBottomColor = value;
        }

        class BorderBottomLeftRadiusProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.borderBottomLeftRadius);
            public override string ussName => "border-bottom-left-radius";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).borderBottomLeftRadius;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).borderBottomLeftRadius = value;
        }

        class BorderBottomRightRadiusProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.borderBottomRightRadius);
            public override string ussName => "border-bottom-right-radius";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).borderBottomRightRadius;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).borderBottomRightRadius = value;
        }

        class BorderBottomWidthProperty : InlineStyleFloatProperty
        {
            public override string Name => nameof(IStyle.borderBottomWidth);
            public override string ussName => "border-bottom-width";
            public override bool IsReadOnly => false;
            public override StyleFloat GetValue(ref InlineStyleAccess container) => ((IStyle)container).borderBottomWidth;
            public override void SetValue(ref InlineStyleAccess container, StyleFloat value) => ((IStyle)container).borderBottomWidth = value;
        }

        class BorderLeftColorProperty : InlineStyleColorProperty
        {
            public override string Name => nameof(IStyle.borderLeftColor);
            public override string ussName => "border-left-color";
            public override bool IsReadOnly => false;
            public override StyleColor GetValue(ref InlineStyleAccess container) => ((IStyle)container).borderLeftColor;
            public override void SetValue(ref InlineStyleAccess container, StyleColor value) => ((IStyle)container).borderLeftColor = value;
        }

        class BorderLeftWidthProperty : InlineStyleFloatProperty
        {
            public override string Name => nameof(IStyle.borderLeftWidth);
            public override string ussName => "border-left-width";
            public override bool IsReadOnly => false;
            public override StyleFloat GetValue(ref InlineStyleAccess container) => ((IStyle)container).borderLeftWidth;
            public override void SetValue(ref InlineStyleAccess container, StyleFloat value) => ((IStyle)container).borderLeftWidth = value;
        }

        class BorderRightColorProperty : InlineStyleColorProperty
        {
            public override string Name => nameof(IStyle.borderRightColor);
            public override string ussName => "border-right-color";
            public override bool IsReadOnly => false;
            public override StyleColor GetValue(ref InlineStyleAccess container) => ((IStyle)container).borderRightColor;
            public override void SetValue(ref InlineStyleAccess container, StyleColor value) => ((IStyle)container).borderRightColor = value;
        }

        class BorderRightWidthProperty : InlineStyleFloatProperty
        {
            public override string Name => nameof(IStyle.borderRightWidth);
            public override string ussName => "border-right-width";
            public override bool IsReadOnly => false;
            public override StyleFloat GetValue(ref InlineStyleAccess container) => ((IStyle)container).borderRightWidth;
            public override void SetValue(ref InlineStyleAccess container, StyleFloat value) => ((IStyle)container).borderRightWidth = value;
        }

        class BorderTopColorProperty : InlineStyleColorProperty
        {
            public override string Name => nameof(IStyle.borderTopColor);
            public override string ussName => "border-top-color";
            public override bool IsReadOnly => false;
            public override StyleColor GetValue(ref InlineStyleAccess container) => ((IStyle)container).borderTopColor;
            public override void SetValue(ref InlineStyleAccess container, StyleColor value) => ((IStyle)container).borderTopColor = value;
        }

        class BorderTopLeftRadiusProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.borderTopLeftRadius);
            public override string ussName => "border-top-left-radius";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).borderTopLeftRadius;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).borderTopLeftRadius = value;
        }

        class BorderTopRightRadiusProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.borderTopRightRadius);
            public override string ussName => "border-top-right-radius";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).borderTopRightRadius;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).borderTopRightRadius = value;
        }

        class BorderTopWidthProperty : InlineStyleFloatProperty
        {
            public override string Name => nameof(IStyle.borderTopWidth);
            public override string ussName => "border-top-width";
            public override bool IsReadOnly => false;
            public override StyleFloat GetValue(ref InlineStyleAccess container) => ((IStyle)container).borderTopWidth;
            public override void SetValue(ref InlineStyleAccess container, StyleFloat value) => ((IStyle)container).borderTopWidth = value;
        }

        class BottomProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.bottom);
            public override string ussName => "bottom";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).bottom;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).bottom = value;
        }

        class ColorProperty : InlineStyleColorProperty
        {
            public override string Name => nameof(IStyle.color);
            public override string ussName => "color";
            public override bool IsReadOnly => false;
            public override StyleColor GetValue(ref InlineStyleAccess container) => ((IStyle)container).color;
            public override void SetValue(ref InlineStyleAccess container, StyleColor value) => ((IStyle)container).color = value;
        }

        class CursorProperty : InlineStyleCursorProperty
        {
            public override string Name => nameof(IStyle.cursor);
            public override string ussName => "cursor";
            public override bool IsReadOnly => false;
            public override StyleCursor GetValue(ref InlineStyleAccess container) => ((IStyle)container).cursor;
            public override void SetValue(ref InlineStyleAccess container, StyleCursor value) => ((IStyle)container).cursor = value;
        }

        class DisplayProperty : InlineStyleEnumProperty<DisplayStyle>
        {
            public override string Name => nameof(IStyle.display);
            public override string ussName => "display";
            public override bool IsReadOnly => false;
            public override StyleEnum<DisplayStyle> GetValue(ref InlineStyleAccess container) => ((IStyle)container).display;
            public override void SetValue(ref InlineStyleAccess container, StyleEnum<DisplayStyle> value) => ((IStyle)container).display = value;
        }

        class FlexBasisProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.flexBasis);
            public override string ussName => "flex-basis";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).flexBasis;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).flexBasis = value;
        }

        class FlexDirectionProperty : InlineStyleEnumProperty<FlexDirection>
        {
            public override string Name => nameof(IStyle.flexDirection);
            public override string ussName => "flex-direction";
            public override bool IsReadOnly => false;
            public override StyleEnum<FlexDirection> GetValue(ref InlineStyleAccess container) => ((IStyle)container).flexDirection;
            public override void SetValue(ref InlineStyleAccess container, StyleEnum<FlexDirection> value) => ((IStyle)container).flexDirection = value;
        }

        class FlexGrowProperty : InlineStyleFloatProperty
        {
            public override string Name => nameof(IStyle.flexGrow);
            public override string ussName => "flex-grow";
            public override bool IsReadOnly => false;
            public override StyleFloat GetValue(ref InlineStyleAccess container) => ((IStyle)container).flexGrow;
            public override void SetValue(ref InlineStyleAccess container, StyleFloat value) => ((IStyle)container).flexGrow = value;
        }

        class FlexShrinkProperty : InlineStyleFloatProperty
        {
            public override string Name => nameof(IStyle.flexShrink);
            public override string ussName => "flex-shrink";
            public override bool IsReadOnly => false;
            public override StyleFloat GetValue(ref InlineStyleAccess container) => ((IStyle)container).flexShrink;
            public override void SetValue(ref InlineStyleAccess container, StyleFloat value) => ((IStyle)container).flexShrink = value;
        }

        class FlexWrapProperty : InlineStyleEnumProperty<Wrap>
        {
            public override string Name => nameof(IStyle.flexWrap);
            public override string ussName => "flex-wrap";
            public override bool IsReadOnly => false;
            public override StyleEnum<Wrap> GetValue(ref InlineStyleAccess container) => ((IStyle)container).flexWrap;
            public override void SetValue(ref InlineStyleAccess container, StyleEnum<Wrap> value) => ((IStyle)container).flexWrap = value;
        }

        class FontSizeProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.fontSize);
            public override string ussName => "font-size";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).fontSize;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).fontSize = value;
        }

        class HeightProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.height);
            public override string ussName => "height";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).height;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).height = value;
        }

        class JustifyContentProperty : InlineStyleEnumProperty<Justify>
        {
            public override string Name => nameof(IStyle.justifyContent);
            public override string ussName => "justify-content";
            public override bool IsReadOnly => false;
            public override StyleEnum<Justify> GetValue(ref InlineStyleAccess container) => ((IStyle)container).justifyContent;
            public override void SetValue(ref InlineStyleAccess container, StyleEnum<Justify> value) => ((IStyle)container).justifyContent = value;
        }

        class LeftProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.left);
            public override string ussName => "left";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).left;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).left = value;
        }

        class LetterSpacingProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.letterSpacing);
            public override string ussName => "letter-spacing";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).letterSpacing;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).letterSpacing = value;
        }

        class MarginBottomProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.marginBottom);
            public override string ussName => "margin-bottom";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).marginBottom;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).marginBottom = value;
        }

        class MarginLeftProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.marginLeft);
            public override string ussName => "margin-left";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).marginLeft;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).marginLeft = value;
        }

        class MarginRightProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.marginRight);
            public override string ussName => "margin-right";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).marginRight;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).marginRight = value;
        }

        class MarginTopProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.marginTop);
            public override string ussName => "margin-top";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).marginTop;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).marginTop = value;
        }

        class MaxHeightProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.maxHeight);
            public override string ussName => "max-height";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).maxHeight;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).maxHeight = value;
        }

        class MaxWidthProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.maxWidth);
            public override string ussName => "max-width";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).maxWidth;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).maxWidth = value;
        }

        class MinHeightProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.minHeight);
            public override string ussName => "min-height";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).minHeight;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).minHeight = value;
        }

        class MinWidthProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.minWidth);
            public override string ussName => "min-width";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).minWidth;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).minWidth = value;
        }

        class OpacityProperty : InlineStyleFloatProperty
        {
            public override string Name => nameof(IStyle.opacity);
            public override string ussName => "opacity";
            public override bool IsReadOnly => false;
            public override StyleFloat GetValue(ref InlineStyleAccess container) => ((IStyle)container).opacity;
            public override void SetValue(ref InlineStyleAccess container, StyleFloat value) => ((IStyle)container).opacity = value;
        }

        class OverflowProperty : InlineStyleEnumProperty<Overflow>
        {
            public override string Name => nameof(IStyle.overflow);
            public override string ussName => "overflow";
            public override bool IsReadOnly => false;
            public override StyleEnum<Overflow> GetValue(ref InlineStyleAccess container) => ((IStyle)container).overflow;
            public override void SetValue(ref InlineStyleAccess container, StyleEnum<Overflow> value) => ((IStyle)container).overflow = value;
        }

        class PaddingBottomProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.paddingBottom);
            public override string ussName => "padding-bottom";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).paddingBottom;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).paddingBottom = value;
        }

        class PaddingLeftProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.paddingLeft);
            public override string ussName => "padding-left";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).paddingLeft;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).paddingLeft = value;
        }

        class PaddingRightProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.paddingRight);
            public override string ussName => "padding-right";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).paddingRight;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).paddingRight = value;
        }

        class PaddingTopProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.paddingTop);
            public override string ussName => "padding-top";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).paddingTop;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).paddingTop = value;
        }

        class PositionProperty : InlineStyleEnumProperty<Position>
        {
            public override string Name => nameof(IStyle.position);
            public override string ussName => "position";
            public override bool IsReadOnly => false;
            public override StyleEnum<Position> GetValue(ref InlineStyleAccess container) => ((IStyle)container).position;
            public override void SetValue(ref InlineStyleAccess container, StyleEnum<Position> value) => ((IStyle)container).position = value;
        }

        class RightProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.right);
            public override string ussName => "right";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).right;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).right = value;
        }

        class RotateProperty : InlineStyleRotateProperty
        {
            public override string Name => nameof(IStyle.rotate);
            public override string ussName => "rotate";
            public override bool IsReadOnly => false;
            public override StyleRotate GetValue(ref InlineStyleAccess container) => ((IStyle)container).rotate;
            public override void SetValue(ref InlineStyleAccess container, StyleRotate value) => ((IStyle)container).rotate = value;
        }

        class ScaleProperty : InlineStyleScaleProperty
        {
            public override string Name => nameof(IStyle.scale);
            public override string ussName => "scale";
            public override bool IsReadOnly => false;
            public override StyleScale GetValue(ref InlineStyleAccess container) => ((IStyle)container).scale;
            public override void SetValue(ref InlineStyleAccess container, StyleScale value) => ((IStyle)container).scale = value;
        }

        class TextOverflowProperty : InlineStyleEnumProperty<TextOverflow>
        {
            public override string Name => nameof(IStyle.textOverflow);
            public override string ussName => "text-overflow";
            public override bool IsReadOnly => false;
            public override StyleEnum<TextOverflow> GetValue(ref InlineStyleAccess container) => ((IStyle)container).textOverflow;
            public override void SetValue(ref InlineStyleAccess container, StyleEnum<TextOverflow> value) => ((IStyle)container).textOverflow = value;
        }

        class TextShadowProperty : InlineStyleTextShadowProperty
        {
            public override string Name => nameof(IStyle.textShadow);
            public override string ussName => "text-shadow";
            public override bool IsReadOnly => false;
            public override StyleTextShadow GetValue(ref InlineStyleAccess container) => ((IStyle)container).textShadow;
            public override void SetValue(ref InlineStyleAccess container, StyleTextShadow value) => ((IStyle)container).textShadow = value;
        }

        class TopProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.top);
            public override string ussName => "top";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).top;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).top = value;
        }

        class TransformOriginProperty : InlineStyleTransformOriginProperty
        {
            public override string Name => nameof(IStyle.transformOrigin);
            public override string ussName => "transform-origin";
            public override bool IsReadOnly => false;
            public override StyleTransformOrigin GetValue(ref InlineStyleAccess container) => ((IStyle)container).transformOrigin;
            public override void SetValue(ref InlineStyleAccess container, StyleTransformOrigin value) => ((IStyle)container).transformOrigin = value;
        }

        class TransitionDelayProperty : InlineStyleListProperty<TimeValue>
        {
            public override string Name => nameof(IStyle.transitionDelay);
            public override string ussName => "transition-delay";
            public override bool IsReadOnly => false;
            public override StyleList<TimeValue> GetValue(ref InlineStyleAccess container) => ((IStyle)container).transitionDelay;
            public override void SetValue(ref InlineStyleAccess container, StyleList<TimeValue> value) => ((IStyle)container).transitionDelay = value;
        }

        class TransitionDurationProperty : InlineStyleListProperty<TimeValue>
        {
            public override string Name => nameof(IStyle.transitionDuration);
            public override string ussName => "transition-duration";
            public override bool IsReadOnly => false;
            public override StyleList<TimeValue> GetValue(ref InlineStyleAccess container) => ((IStyle)container).transitionDuration;
            public override void SetValue(ref InlineStyleAccess container, StyleList<TimeValue> value) => ((IStyle)container).transitionDuration = value;
        }

        class TransitionPropertyProperty : InlineStyleListProperty<StylePropertyName>
        {
            public override string Name => nameof(IStyle.transitionProperty);
            public override string ussName => "transition-property";
            public override bool IsReadOnly => false;
            public override StyleList<StylePropertyName> GetValue(ref InlineStyleAccess container) => ((IStyle)container).transitionProperty;
            public override void SetValue(ref InlineStyleAccess container, StyleList<StylePropertyName> value) => ((IStyle)container).transitionProperty = value;
        }

        class TransitionTimingFunctionProperty : InlineStyleListProperty<EasingFunction>
        {
            public override string Name => nameof(IStyle.transitionTimingFunction);
            public override string ussName => "transition-timing-function";
            public override bool IsReadOnly => false;
            public override StyleList<EasingFunction> GetValue(ref InlineStyleAccess container) => ((IStyle)container).transitionTimingFunction;
            public override void SetValue(ref InlineStyleAccess container, StyleList<EasingFunction> value) => ((IStyle)container).transitionTimingFunction = value;
        }

        class TranslateProperty : InlineStyleTranslateProperty
        {
            public override string Name => nameof(IStyle.translate);
            public override string ussName => "translate";
            public override bool IsReadOnly => false;
            public override StyleTranslate GetValue(ref InlineStyleAccess container) => ((IStyle)container).translate;
            public override void SetValue(ref InlineStyleAccess container, StyleTranslate value) => ((IStyle)container).translate = value;
        }

        class UnityBackgroundImageTintColorProperty : InlineStyleColorProperty
        {
            public override string Name => nameof(IStyle.unityBackgroundImageTintColor);
            public override string ussName => "-unity-background-image-tint-color";
            public override bool IsReadOnly => false;
            public override StyleColor GetValue(ref InlineStyleAccess container) => ((IStyle)container).unityBackgroundImageTintColor;
            public override void SetValue(ref InlineStyleAccess container, StyleColor value) => ((IStyle)container).unityBackgroundImageTintColor = value;
        }

        class UnityEditorTextRenderingModeProperty : InlineStyleEnumProperty<EditorTextRenderingMode>
        {
            public override string Name => nameof(IStyle.unityEditorTextRenderingMode);
            public override string ussName => "-unity-editor-text-rendering-mode";
            public override bool IsReadOnly => false;
            public override StyleEnum<EditorTextRenderingMode> GetValue(ref InlineStyleAccess container) => ((IStyle)container).unityEditorTextRenderingMode;
            public override void SetValue(ref InlineStyleAccess container, StyleEnum<EditorTextRenderingMode> value) => ((IStyle)container).unityEditorTextRenderingMode = value;
        }

        class UnityFontProperty : InlineStyleFontProperty
        {
            public override string Name => nameof(IStyle.unityFont);
            public override string ussName => "-unity-font";
            public override bool IsReadOnly => false;
            public override StyleFont GetValue(ref InlineStyleAccess container) => ((IStyle)container).unityFont;
            public override void SetValue(ref InlineStyleAccess container, StyleFont value) => ((IStyle)container).unityFont = value;
        }

        class UnityFontDefinitionProperty : InlineStyleFontDefinitionProperty
        {
            public override string Name => nameof(IStyle.unityFontDefinition);
            public override string ussName => "-unity-font-definition";
            public override bool IsReadOnly => false;
            public override StyleFontDefinition GetValue(ref InlineStyleAccess container) => ((IStyle)container).unityFontDefinition;
            public override void SetValue(ref InlineStyleAccess container, StyleFontDefinition value) => ((IStyle)container).unityFontDefinition = value;
        }

        class UnityFontStyleAndWeightProperty : InlineStyleEnumProperty<FontStyle>
        {
            public override string Name => nameof(IStyle.unityFontStyleAndWeight);
            public override string ussName => "-unity-font-style";
            public override bool IsReadOnly => false;
            public override StyleEnum<FontStyle> GetValue(ref InlineStyleAccess container) => ((IStyle)container).unityFontStyleAndWeight;
            public override void SetValue(ref InlineStyleAccess container, StyleEnum<FontStyle> value) => ((IStyle)container).unityFontStyleAndWeight = value;
        }

        class UnityOverflowClipBoxProperty : InlineStyleEnumProperty<OverflowClipBox>
        {
            public override string Name => nameof(IStyle.unityOverflowClipBox);
            public override string ussName => "-unity-overflow-clip-box";
            public override bool IsReadOnly => false;
            public override StyleEnum<OverflowClipBox> GetValue(ref InlineStyleAccess container) => ((IStyle)container).unityOverflowClipBox;
            public override void SetValue(ref InlineStyleAccess container, StyleEnum<OverflowClipBox> value) => ((IStyle)container).unityOverflowClipBox = value;
        }

        class UnityParagraphSpacingProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.unityParagraphSpacing);
            public override string ussName => "-unity-paragraph-spacing";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).unityParagraphSpacing;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).unityParagraphSpacing = value;
        }

        class UnitySliceBottomProperty : InlineStyleIntProperty
        {
            public override string Name => nameof(IStyle.unitySliceBottom);
            public override string ussName => "-unity-slice-bottom";
            public override bool IsReadOnly => false;
            public override StyleInt GetValue(ref InlineStyleAccess container) => ((IStyle)container).unitySliceBottom;
            public override void SetValue(ref InlineStyleAccess container, StyleInt value) => ((IStyle)container).unitySliceBottom = value;
        }

        class UnitySliceLeftProperty : InlineStyleIntProperty
        {
            public override string Name => nameof(IStyle.unitySliceLeft);
            public override string ussName => "-unity-slice-left";
            public override bool IsReadOnly => false;
            public override StyleInt GetValue(ref InlineStyleAccess container) => ((IStyle)container).unitySliceLeft;
            public override void SetValue(ref InlineStyleAccess container, StyleInt value) => ((IStyle)container).unitySliceLeft = value;
        }

        class UnitySliceRightProperty : InlineStyleIntProperty
        {
            public override string Name => nameof(IStyle.unitySliceRight);
            public override string ussName => "-unity-slice-right";
            public override bool IsReadOnly => false;
            public override StyleInt GetValue(ref InlineStyleAccess container) => ((IStyle)container).unitySliceRight;
            public override void SetValue(ref InlineStyleAccess container, StyleInt value) => ((IStyle)container).unitySliceRight = value;
        }

        class UnitySliceScaleProperty : InlineStyleFloatProperty
        {
            public override string Name => nameof(IStyle.unitySliceScale);
            public override string ussName => "-unity-slice-scale";
            public override bool IsReadOnly => false;
            public override StyleFloat GetValue(ref InlineStyleAccess container) => ((IStyle)container).unitySliceScale;
            public override void SetValue(ref InlineStyleAccess container, StyleFloat value) => ((IStyle)container).unitySliceScale = value;
        }

        class UnitySliceTopProperty : InlineStyleIntProperty
        {
            public override string Name => nameof(IStyle.unitySliceTop);
            public override string ussName => "-unity-slice-top";
            public override bool IsReadOnly => false;
            public override StyleInt GetValue(ref InlineStyleAccess container) => ((IStyle)container).unitySliceTop;
            public override void SetValue(ref InlineStyleAccess container, StyleInt value) => ((IStyle)container).unitySliceTop = value;
        }

        class UnitySliceTypeProperty : InlineStyleEnumProperty<SliceType>
        {
            public override string Name => nameof(IStyle.unitySliceType);
            public override string ussName => "-unity-slice-type";
            public override bool IsReadOnly => false;
            public override StyleEnum<SliceType> GetValue(ref InlineStyleAccess container) => ((IStyle)container).unitySliceType;
            public override void SetValue(ref InlineStyleAccess container, StyleEnum<SliceType> value) => ((IStyle)container).unitySliceType = value;
        }

        class UnityTextAlignProperty : InlineStyleEnumProperty<TextAnchor>
        {
            public override string Name => nameof(IStyle.unityTextAlign);
            public override string ussName => "-unity-text-align";
            public override bool IsReadOnly => false;
            public override StyleEnum<TextAnchor> GetValue(ref InlineStyleAccess container) => ((IStyle)container).unityTextAlign;
            public override void SetValue(ref InlineStyleAccess container, StyleEnum<TextAnchor> value) => ((IStyle)container).unityTextAlign = value;
        }

        class UnityTextGeneratorProperty : InlineStyleEnumProperty<TextGeneratorType>
        {
            public override string Name => nameof(IStyle.unityTextGenerator);
            public override string ussName => "-unity-text-generator";
            public override bool IsReadOnly => false;
            public override StyleEnum<TextGeneratorType> GetValue(ref InlineStyleAccess container) => ((IStyle)container).unityTextGenerator;
            public override void SetValue(ref InlineStyleAccess container, StyleEnum<TextGeneratorType> value) => ((IStyle)container).unityTextGenerator = value;
        }

        class UnityTextOutlineColorProperty : InlineStyleColorProperty
        {
            public override string Name => nameof(IStyle.unityTextOutlineColor);
            public override string ussName => "-unity-text-outline-color";
            public override bool IsReadOnly => false;
            public override StyleColor GetValue(ref InlineStyleAccess container) => ((IStyle)container).unityTextOutlineColor;
            public override void SetValue(ref InlineStyleAccess container, StyleColor value) => ((IStyle)container).unityTextOutlineColor = value;
        }

        class UnityTextOutlineWidthProperty : InlineStyleFloatProperty
        {
            public override string Name => nameof(IStyle.unityTextOutlineWidth);
            public override string ussName => "-unity-text-outline-width";
            public override bool IsReadOnly => false;
            public override StyleFloat GetValue(ref InlineStyleAccess container) => ((IStyle)container).unityTextOutlineWidth;
            public override void SetValue(ref InlineStyleAccess container, StyleFloat value) => ((IStyle)container).unityTextOutlineWidth = value;
        }

        class UnityTextOverflowPositionProperty : InlineStyleEnumProperty<TextOverflowPosition>
        {
            public override string Name => nameof(IStyle.unityTextOverflowPosition);
            public override string ussName => "-unity-text-overflow-position";
            public override bool IsReadOnly => false;
            public override StyleEnum<TextOverflowPosition> GetValue(ref InlineStyleAccess container) => ((IStyle)container).unityTextOverflowPosition;
            public override void SetValue(ref InlineStyleAccess container, StyleEnum<TextOverflowPosition> value) => ((IStyle)container).unityTextOverflowPosition = value;
        }

        class VisibilityProperty : InlineStyleEnumProperty<Visibility>
        {
            public override string Name => nameof(IStyle.visibility);
            public override string ussName => "visibility";
            public override bool IsReadOnly => false;
            public override StyleEnum<Visibility> GetValue(ref InlineStyleAccess container) => ((IStyle)container).visibility;
            public override void SetValue(ref InlineStyleAccess container, StyleEnum<Visibility> value) => ((IStyle)container).visibility = value;
        }

        class WhiteSpaceProperty : InlineStyleEnumProperty<WhiteSpace>
        {
            public override string Name => nameof(IStyle.whiteSpace);
            public override string ussName => "white-space";
            public override bool IsReadOnly => false;
            public override StyleEnum<WhiteSpace> GetValue(ref InlineStyleAccess container) => ((IStyle)container).whiteSpace;
            public override void SetValue(ref InlineStyleAccess container, StyleEnum<WhiteSpace> value) => ((IStyle)container).whiteSpace = value;
        }

        class WidthProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.width);
            public override string ussName => "width";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).width;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).width = value;
        }

        class WordSpacingProperty : InlineStyleLengthProperty
        {
            public override string Name => nameof(IStyle.wordSpacing);
            public override string ussName => "word-spacing";
            public override bool IsReadOnly => false;
            public override StyleLength GetValue(ref InlineStyleAccess container) => ((IStyle)container).wordSpacing;
            public override void SetValue(ref InlineStyleAccess container, StyleLength value) => ((IStyle)container).wordSpacing = value;
        }

        public InlineStyleAccessPropertyBag()
        {
            m_PropertiesList = new List<IProperty<InlineStyleAccess>>(84);
            m_PropertiesHash = new Dictionary<string, IProperty<InlineStyleAccess>>(252);
            AddProperty(new AlignContentProperty());
            AddProperty(new AlignItemsProperty());
            AddProperty(new AlignSelfProperty());
            AddProperty(new BackgroundColorProperty());
            AddProperty(new BackgroundImageProperty());
            AddProperty(new BackgroundPositionXProperty());
            AddProperty(new BackgroundPositionYProperty());
            AddProperty(new BackgroundRepeatProperty());
            AddProperty(new BackgroundSizeProperty());
            AddProperty(new BorderBottomColorProperty());
            AddProperty(new BorderBottomLeftRadiusProperty());
            AddProperty(new BorderBottomRightRadiusProperty());
            AddProperty(new BorderBottomWidthProperty());
            AddProperty(new BorderLeftColorProperty());
            AddProperty(new BorderLeftWidthProperty());
            AddProperty(new BorderRightColorProperty());
            AddProperty(new BorderRightWidthProperty());
            AddProperty(new BorderTopColorProperty());
            AddProperty(new BorderTopLeftRadiusProperty());
            AddProperty(new BorderTopRightRadiusProperty());
            AddProperty(new BorderTopWidthProperty());
            AddProperty(new BottomProperty());
            AddProperty(new ColorProperty());
            AddProperty(new CursorProperty());
            AddProperty(new DisplayProperty());
            AddProperty(new FlexBasisProperty());
            AddProperty(new FlexDirectionProperty());
            AddProperty(new FlexGrowProperty());
            AddProperty(new FlexShrinkProperty());
            AddProperty(new FlexWrapProperty());
            AddProperty(new FontSizeProperty());
            AddProperty(new HeightProperty());
            AddProperty(new JustifyContentProperty());
            AddProperty(new LeftProperty());
            AddProperty(new LetterSpacingProperty());
            AddProperty(new MarginBottomProperty());
            AddProperty(new MarginLeftProperty());
            AddProperty(new MarginRightProperty());
            AddProperty(new MarginTopProperty());
            AddProperty(new MaxHeightProperty());
            AddProperty(new MaxWidthProperty());
            AddProperty(new MinHeightProperty());
            AddProperty(new MinWidthProperty());
            AddProperty(new OpacityProperty());
            AddProperty(new OverflowProperty());
            AddProperty(new PaddingBottomProperty());
            AddProperty(new PaddingLeftProperty());
            AddProperty(new PaddingRightProperty());
            AddProperty(new PaddingTopProperty());
            AddProperty(new PositionProperty());
            AddProperty(new RightProperty());
            AddProperty(new RotateProperty());
            AddProperty(new ScaleProperty());
            AddProperty(new TextOverflowProperty());
            AddProperty(new TextShadowProperty());
            AddProperty(new TopProperty());
            AddProperty(new TransformOriginProperty());
            AddProperty(new TransitionDelayProperty());
            AddProperty(new TransitionDurationProperty());
            AddProperty(new TransitionPropertyProperty());
            AddProperty(new TransitionTimingFunctionProperty());
            AddProperty(new TranslateProperty());
            AddProperty(new UnityBackgroundImageTintColorProperty());
            AddProperty(new UnityEditorTextRenderingModeProperty());
            AddProperty(new UnityFontProperty());
            AddProperty(new UnityFontDefinitionProperty());
            AddProperty(new UnityFontStyleAndWeightProperty());
            AddProperty(new UnityOverflowClipBoxProperty());
            AddProperty(new UnityParagraphSpacingProperty());
            AddProperty(new UnitySliceBottomProperty());
            AddProperty(new UnitySliceLeftProperty());
            AddProperty(new UnitySliceRightProperty());
            AddProperty(new UnitySliceScaleProperty());
            AddProperty(new UnitySliceTopProperty());
            AddProperty(new UnitySliceTypeProperty());
            AddProperty(new UnityTextAlignProperty());
            AddProperty(new UnityTextGeneratorProperty());
            AddProperty(new UnityTextOutlineColorProperty());
            AddProperty(new UnityTextOutlineWidthProperty());
            AddProperty(new UnityTextOverflowPositionProperty());
            AddProperty(new VisibilityProperty());
            AddProperty(new WhiteSpaceProperty());
            AddProperty(new WidthProperty());
            AddProperty(new WordSpacingProperty());
        }
    }
}

// Unity C# reference source
// Copyright (c) Unity Technologies. For terms of use, see
// https://unity3d.com/legal/licenses/Unity_Reference_Only_License

/******************************************************************************/
//
//                             DO NOT MODIFY
//          This file has been generated by the UIElementsGenerator tool
//              See ResolvedStyleAccessPropertyBagCsGenerator class for details
//
/******************************************************************************/
using System.Collections.Generic;
using Unity.Properties;

namespace UnityEngine.UIElements
{
    internal partial class ResolvedStyleAccessPropertyBag
    {
        class AlignContentProperty : ResolvedEnumProperty<Align>
        {
            public override string Name => nameof(IResolvedStyle.alignContent);
            public override string ussName => "align-content";
            public override bool IsReadOnly => true;
            public override Align GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).alignContent;
            public override void SetValue(ref ResolvedStyleAccess container, Align value) => throw new System.InvalidOperationException();
        }

        class AlignItemsProperty : ResolvedEnumProperty<Align>
        {
            public override string Name => nameof(IResolvedStyle.alignItems);
            public override string ussName => "align-items";
            public override bool IsReadOnly => true;
            public override Align GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).alignItems;
            public override void SetValue(ref ResolvedStyleAccess container, Align value) => throw new System.InvalidOperationException();
        }

        class AlignSelfProperty : ResolvedEnumProperty<Align>
        {
            public override string Name => nameof(IResolvedStyle.alignSelf);
            public override string ussName => "align-self";
            public override bool IsReadOnly => true;
            public override Align GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).alignSelf;
            public override void SetValue(ref ResolvedStyleAccess container, Align value) => throw new System.InvalidOperationException();
        }

        class BackgroundColorProperty : ResolvedColorProperty
        {
            public override string Name => nameof(IResolvedStyle.backgroundColor);
            public override string ussName => "background-color";
            public override bool IsReadOnly => true;
            public override Color GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).backgroundColor;
            public override void SetValue(ref ResolvedStyleAccess container, Color value) => throw new System.InvalidOperationException();
        }

        class BackgroundImageProperty : ResolvedBackgroundProperty
        {
            public override string Name => nameof(IResolvedStyle.backgroundImage);
            public override string ussName => "background-image";
            public override bool IsReadOnly => true;
            public override Background GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).backgroundImage;
            public override void SetValue(ref ResolvedStyleAccess container, Background value) => throw new System.InvalidOperationException();
        }

        class BackgroundPositionXProperty : ResolvedBackgroundPositionProperty
        {
            public override string Name => nameof(IResolvedStyle.backgroundPositionX);
            public override string ussName => "background-position-x";
            public override bool IsReadOnly => true;
            public override BackgroundPosition GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).backgroundPositionX;
            public override void SetValue(ref ResolvedStyleAccess container, BackgroundPosition value) => throw new System.InvalidOperationException();
        }

        class BackgroundPositionYProperty : ResolvedBackgroundPositionProperty
        {
            public override string Name => nameof(IResolvedStyle.backgroundPositionY);
            public override string ussName => "background-position-y";
            public override bool IsReadOnly => true;
            public override BackgroundPosition GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).backgroundPositionY;
            public override void SetValue(ref ResolvedStyleAccess container, BackgroundPosition value) => throw new System.InvalidOperationException();
        }

        class BackgroundRepeatProperty : ResolvedBackgroundRepeatProperty
        {
            public override string Name => nameof(IResolvedStyle.backgroundRepeat);
            public override string ussName => "background-repeat";
            public override bool IsReadOnly => true;
            public override BackgroundRepeat GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).backgroundRepeat;
            public override void SetValue(ref ResolvedStyleAccess container, BackgroundRepeat value) => throw new System.InvalidOperationException();
        }

        class BackgroundSizeProperty : ResolvedBackgroundSizeProperty
        {
            public override string Name => nameof(IResolvedStyle.backgroundSize);
            public override string ussName => "background-size";
            public override bool IsReadOnly => true;
            public override BackgroundSize GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).backgroundSize;
            public override void SetValue(ref ResolvedStyleAccess container, BackgroundSize value) => throw new System.InvalidOperationException();
        }

        class BorderBottomColorProperty : ResolvedColorProperty
        {
            public override string Name => nameof(IResolvedStyle.borderBottomColor);
            public override string ussName => "border-bottom-color";
            public override bool IsReadOnly => true;
            public override Color GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).borderBottomColor;
            public override void SetValue(ref ResolvedStyleAccess container, Color value) => throw new System.InvalidOperationException();
        }

        class BorderBottomLeftRadiusProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.borderBottomLeftRadius);
            public override string ussName => "border-bottom-left-radius";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).borderBottomLeftRadius;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class BorderBottomRightRadiusProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.borderBottomRightRadius);
            public override string ussName => "border-bottom-right-radius";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).borderBottomRightRadius;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class BorderBottomWidthProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.borderBottomWidth);
            public override string ussName => "border-bottom-width";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).borderBottomWidth;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class BorderLeftColorProperty : ResolvedColorProperty
        {
            public override string Name => nameof(IResolvedStyle.borderLeftColor);
            public override string ussName => "border-left-color";
            public override bool IsReadOnly => true;
            public override Color GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).borderLeftColor;
            public override void SetValue(ref ResolvedStyleAccess container, Color value) => throw new System.InvalidOperationException();
        }

        class BorderLeftWidthProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.borderLeftWidth);
            public override string ussName => "border-left-width";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).borderLeftWidth;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class BorderRightColorProperty : ResolvedColorProperty
        {
            public override string Name => nameof(IResolvedStyle.borderRightColor);
            public override string ussName => "border-right-color";
            public override bool IsReadOnly => true;
            public override Color GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).borderRightColor;
            public override void SetValue(ref ResolvedStyleAccess container, Color value) => throw new System.InvalidOperationException();
        }

        class BorderRightWidthProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.borderRightWidth);
            public override string ussName => "border-right-width";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).borderRightWidth;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class BorderTopColorProperty : ResolvedColorProperty
        {
            public override string Name => nameof(IResolvedStyle.borderTopColor);
            public override string ussName => "border-top-color";
            public override bool IsReadOnly => true;
            public override Color GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).borderTopColor;
            public override void SetValue(ref ResolvedStyleAccess container, Color value) => throw new System.InvalidOperationException();
        }

        class BorderTopLeftRadiusProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.borderTopLeftRadius);
            public override string ussName => "border-top-left-radius";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).borderTopLeftRadius;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class BorderTopRightRadiusProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.borderTopRightRadius);
            public override string ussName => "border-top-right-radius";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).borderTopRightRadius;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class BorderTopWidthProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.borderTopWidth);
            public override string ussName => "border-top-width";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).borderTopWidth;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class BottomProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.bottom);
            public override string ussName => "bottom";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).bottom;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class ColorProperty : ResolvedColorProperty
        {
            public override string Name => nameof(IResolvedStyle.color);
            public override string ussName => "color";
            public override bool IsReadOnly => true;
            public override Color GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).color;
            public override void SetValue(ref ResolvedStyleAccess container, Color value) => throw new System.InvalidOperationException();
        }

        class DisplayProperty : ResolvedEnumProperty<DisplayStyle>
        {
            public override string Name => nameof(IResolvedStyle.display);
            public override string ussName => "display";
            public override bool IsReadOnly => true;
            public override DisplayStyle GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).display;
            public override void SetValue(ref ResolvedStyleAccess container, DisplayStyle value) => throw new System.InvalidOperationException();
        }

        class FlexBasisProperty : ResolvedStyleFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.flexBasis);
            public override string ussName => "flex-basis";
            public override bool IsReadOnly => true;
            public override StyleFloat GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).flexBasis;
            public override void SetValue(ref ResolvedStyleAccess container, StyleFloat value) => throw new System.InvalidOperationException();
        }

        class FlexDirectionProperty : ResolvedEnumProperty<FlexDirection>
        {
            public override string Name => nameof(IResolvedStyle.flexDirection);
            public override string ussName => "flex-direction";
            public override bool IsReadOnly => true;
            public override FlexDirection GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).flexDirection;
            public override void SetValue(ref ResolvedStyleAccess container, FlexDirection value) => throw new System.InvalidOperationException();
        }

        class FlexGrowProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.flexGrow);
            public override string ussName => "flex-grow";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).flexGrow;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class FlexShrinkProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.flexShrink);
            public override string ussName => "flex-shrink";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).flexShrink;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class FlexWrapProperty : ResolvedEnumProperty<Wrap>
        {
            public override string Name => nameof(IResolvedStyle.flexWrap);
            public override string ussName => "flex-wrap";
            public override bool IsReadOnly => true;
            public override Wrap GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).flexWrap;
            public override void SetValue(ref ResolvedStyleAccess container, Wrap value) => throw new System.InvalidOperationException();
        }

        class FontSizeProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.fontSize);
            public override string ussName => "font-size";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).fontSize;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class HeightProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.height);
            public override string ussName => "height";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).height;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class JustifyContentProperty : ResolvedEnumProperty<Justify>
        {
            public override string Name => nameof(IResolvedStyle.justifyContent);
            public override string ussName => "justify-content";
            public override bool IsReadOnly => true;
            public override Justify GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).justifyContent;
            public override void SetValue(ref ResolvedStyleAccess container, Justify value) => throw new System.InvalidOperationException();
        }

        class LeftProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.left);
            public override string ussName => "left";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).left;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class LetterSpacingProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.letterSpacing);
            public override string ussName => "letter-spacing";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).letterSpacing;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class MarginBottomProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.marginBottom);
            public override string ussName => "margin-bottom";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).marginBottom;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class MarginLeftProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.marginLeft);
            public override string ussName => "margin-left";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).marginLeft;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class MarginRightProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.marginRight);
            public override string ussName => "margin-right";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).marginRight;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class MarginTopProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.marginTop);
            public override string ussName => "margin-top";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).marginTop;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class MaxHeightProperty : ResolvedStyleFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.maxHeight);
            public override string ussName => "max-height";
            public override bool IsReadOnly => true;
            public override StyleFloat GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).maxHeight;
            public override void SetValue(ref ResolvedStyleAccess container, StyleFloat value) => throw new System.InvalidOperationException();
        }

        class MaxWidthProperty : ResolvedStyleFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.maxWidth);
            public override string ussName => "max-width";
            public override bool IsReadOnly => true;
            public override StyleFloat GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).maxWidth;
            public override void SetValue(ref ResolvedStyleAccess container, StyleFloat value) => throw new System.InvalidOperationException();
        }

        class MinHeightProperty : ResolvedStyleFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.minHeight);
            public override string ussName => "min-height";
            public override bool IsReadOnly => true;
            public override StyleFloat GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).minHeight;
            public override void SetValue(ref ResolvedStyleAccess container, StyleFloat value) => throw new System.InvalidOperationException();
        }

        class MinWidthProperty : ResolvedStyleFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.minWidth);
            public override string ussName => "min-width";
            public override bool IsReadOnly => true;
            public override StyleFloat GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).minWidth;
            public override void SetValue(ref ResolvedStyleAccess container, StyleFloat value) => throw new System.InvalidOperationException();
        }

        class OpacityProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.opacity);
            public override string ussName => "opacity";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).opacity;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class PaddingBottomProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.paddingBottom);
            public override string ussName => "padding-bottom";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).paddingBottom;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class PaddingLeftProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.paddingLeft);
            public override string ussName => "padding-left";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).paddingLeft;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class PaddingRightProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.paddingRight);
            public override string ussName => "padding-right";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).paddingRight;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class PaddingTopProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.paddingTop);
            public override string ussName => "padding-top";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).paddingTop;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class PositionProperty : ResolvedEnumProperty<Position>
        {
            public override string Name => nameof(IResolvedStyle.position);
            public override string ussName => "position";
            public override bool IsReadOnly => true;
            public override Position GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).position;
            public override void SetValue(ref ResolvedStyleAccess container, Position value) => throw new System.InvalidOperationException();
        }

        class RightProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.right);
            public override string ussName => "right";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).right;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class RotateProperty : ResolvedRotateProperty
        {
            public override string Name => nameof(IResolvedStyle.rotate);
            public override string ussName => "rotate";
            public override bool IsReadOnly => true;
            public override Rotate GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).rotate;
            public override void SetValue(ref ResolvedStyleAccess container, Rotate value) => throw new System.InvalidOperationException();
        }

        class ScaleProperty : ResolvedScaleProperty
        {
            public override string Name => nameof(IResolvedStyle.scale);
            public override string ussName => "scale";
            public override bool IsReadOnly => true;
            public override Scale GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).scale;
            public override void SetValue(ref ResolvedStyleAccess container, Scale value) => throw new System.InvalidOperationException();
        }

        class TextOverflowProperty : ResolvedEnumProperty<TextOverflow>
        {
            public override string Name => nameof(IResolvedStyle.textOverflow);
            public override string ussName => "text-overflow";
            public override bool IsReadOnly => true;
            public override TextOverflow GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).textOverflow;
            public override void SetValue(ref ResolvedStyleAccess container, TextOverflow value) => throw new System.InvalidOperationException();
        }

        class TopProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.top);
            public override string ussName => "top";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).top;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class TransformOriginProperty : ResolvedVector3Property
        {
            public override string Name => nameof(IResolvedStyle.transformOrigin);
            public override string ussName => "transform-origin";
            public override bool IsReadOnly => true;
            public override Vector3 GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).transformOrigin;
            public override void SetValue(ref ResolvedStyleAccess container, Vector3 value) => throw new System.InvalidOperationException();
        }

        class TransitionDelayProperty : ResolvedListProperty<TimeValue>
        {
            public override string Name => nameof(IResolvedStyle.transitionDelay);
            public override string ussName => "transition-delay";
            public override bool IsReadOnly => true;
            public override IEnumerable<TimeValue> GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).transitionDelay;
            public override void SetValue(ref ResolvedStyleAccess container, IEnumerable<TimeValue> value) => throw new System.InvalidOperationException();
        }

        class TransitionDurationProperty : ResolvedListProperty<TimeValue>
        {
            public override string Name => nameof(IResolvedStyle.transitionDuration);
            public override string ussName => "transition-duration";
            public override bool IsReadOnly => true;
            public override IEnumerable<TimeValue> GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).transitionDuration;
            public override void SetValue(ref ResolvedStyleAccess container, IEnumerable<TimeValue> value) => throw new System.InvalidOperationException();
        }

        class TransitionPropertyProperty : ResolvedListProperty<StylePropertyName>
        {
            public override string Name => nameof(IResolvedStyle.transitionProperty);
            public override string ussName => "transition-property";
            public override bool IsReadOnly => true;
            public override IEnumerable<StylePropertyName> GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).transitionProperty;
            public override void SetValue(ref ResolvedStyleAccess container, IEnumerable<StylePropertyName> value) => throw new System.InvalidOperationException();
        }

        class TransitionTimingFunctionProperty : ResolvedListProperty<EasingFunction>
        {
            public override string Name => nameof(IResolvedStyle.transitionTimingFunction);
            public override string ussName => "transition-timing-function";
            public override bool IsReadOnly => true;
            public override IEnumerable<EasingFunction> GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).transitionTimingFunction;
            public override void SetValue(ref ResolvedStyleAccess container, IEnumerable<EasingFunction> value) => throw new System.InvalidOperationException();
        }

        class TranslateProperty : ResolvedVector3Property
        {
            public override string Name => nameof(IResolvedStyle.translate);
            public override string ussName => "translate";
            public override bool IsReadOnly => true;
            public override Vector3 GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).translate;
            public override void SetValue(ref ResolvedStyleAccess container, Vector3 value) => throw new System.InvalidOperationException();
        }

        class UnityBackgroundImageTintColorProperty : ResolvedColorProperty
        {
            public override string Name => nameof(IResolvedStyle.unityBackgroundImageTintColor);
            public override string ussName => "-unity-background-image-tint-color";
            public override bool IsReadOnly => true;
            public override Color GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).unityBackgroundImageTintColor;
            public override void SetValue(ref ResolvedStyleAccess container, Color value) => throw new System.InvalidOperationException();
        }

        class UnityEditorTextRenderingModeProperty : ResolvedEnumProperty<EditorTextRenderingMode>
        {
            public override string Name => nameof(IResolvedStyle.unityEditorTextRenderingMode);
            public override string ussName => "-unity-editor-text-rendering-mode";
            public override bool IsReadOnly => true;
            public override EditorTextRenderingMode GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).unityEditorTextRenderingMode;
            public override void SetValue(ref ResolvedStyleAccess container, EditorTextRenderingMode value) => throw new System.InvalidOperationException();
        }

        class UnityFontProperty : ResolvedFontProperty
        {
            public override string Name => nameof(IResolvedStyle.unityFont);
            public override string ussName => "-unity-font";
            public override bool IsReadOnly => true;
            public override Font GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).unityFont;
            public override void SetValue(ref ResolvedStyleAccess container, Font value) => throw new System.InvalidOperationException();
        }

        class UnityFontDefinitionProperty : ResolvedFontDefinitionProperty
        {
            public override string Name => nameof(IResolvedStyle.unityFontDefinition);
            public override string ussName => "-unity-font-definition";
            public override bool IsReadOnly => true;
            public override FontDefinition GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).unityFontDefinition;
            public override void SetValue(ref ResolvedStyleAccess container, FontDefinition value) => throw new System.InvalidOperationException();
        }

        class UnityFontStyleAndWeightProperty : ResolvedEnumProperty<FontStyle>
        {
            public override string Name => nameof(IResolvedStyle.unityFontStyleAndWeight);
            public override string ussName => "-unity-font-style";
            public override bool IsReadOnly => true;
            public override FontStyle GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).unityFontStyleAndWeight;
            public override void SetValue(ref ResolvedStyleAccess container, FontStyle value) => throw new System.InvalidOperationException();
        }

        class UnityParagraphSpacingProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.unityParagraphSpacing);
            public override string ussName => "-unity-paragraph-spacing";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).unityParagraphSpacing;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class UnitySliceBottomProperty : ResolvedIntProperty
        {
            public override string Name => nameof(IResolvedStyle.unitySliceBottom);
            public override string ussName => "-unity-slice-bottom";
            public override bool IsReadOnly => true;
            public override int GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).unitySliceBottom;
            public override void SetValue(ref ResolvedStyleAccess container, int value) => throw new System.InvalidOperationException();
        }

        class UnitySliceLeftProperty : ResolvedIntProperty
        {
            public override string Name => nameof(IResolvedStyle.unitySliceLeft);
            public override string ussName => "-unity-slice-left";
            public override bool IsReadOnly => true;
            public override int GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).unitySliceLeft;
            public override void SetValue(ref ResolvedStyleAccess container, int value) => throw new System.InvalidOperationException();
        }

        class UnitySliceRightProperty : ResolvedIntProperty
        {
            public override string Name => nameof(IResolvedStyle.unitySliceRight);
            public override string ussName => "-unity-slice-right";
            public override bool IsReadOnly => true;
            public override int GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).unitySliceRight;
            public override void SetValue(ref ResolvedStyleAccess container, int value) => throw new System.InvalidOperationException();
        }

        class UnitySliceScaleProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.unitySliceScale);
            public override string ussName => "-unity-slice-scale";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).unitySliceScale;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class UnitySliceTopProperty : ResolvedIntProperty
        {
            public override string Name => nameof(IResolvedStyle.unitySliceTop);
            public override string ussName => "-unity-slice-top";
            public override bool IsReadOnly => true;
            public override int GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).unitySliceTop;
            public override void SetValue(ref ResolvedStyleAccess container, int value) => throw new System.InvalidOperationException();
        }

        class UnitySliceTypeProperty : ResolvedEnumProperty<SliceType>
        {
            public override string Name => nameof(IResolvedStyle.unitySliceType);
            public override string ussName => "-unity-slice-type";
            public override bool IsReadOnly => true;
            public override SliceType GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).unitySliceType;
            public override void SetValue(ref ResolvedStyleAccess container, SliceType value) => throw new System.InvalidOperationException();
        }

        class UnityTextAlignProperty : ResolvedEnumProperty<TextAnchor>
        {
            public override string Name => nameof(IResolvedStyle.unityTextAlign);
            public override string ussName => "-unity-text-align";
            public override bool IsReadOnly => true;
            public override TextAnchor GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).unityTextAlign;
            public override void SetValue(ref ResolvedStyleAccess container, TextAnchor value) => throw new System.InvalidOperationException();
        }

        class UnityTextGeneratorProperty : ResolvedEnumProperty<TextGeneratorType>
        {
            public override string Name => nameof(IResolvedStyle.unityTextGenerator);
            public override string ussName => "-unity-text-generator";
            public override bool IsReadOnly => true;
            public override TextGeneratorType GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).unityTextGenerator;
            public override void SetValue(ref ResolvedStyleAccess container, TextGeneratorType value) => throw new System.InvalidOperationException();
        }

        class UnityTextOutlineColorProperty : ResolvedColorProperty
        {
            public override string Name => nameof(IResolvedStyle.unityTextOutlineColor);
            public override string ussName => "-unity-text-outline-color";
            public override bool IsReadOnly => true;
            public override Color GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).unityTextOutlineColor;
            public override void SetValue(ref ResolvedStyleAccess container, Color value) => throw new System.InvalidOperationException();
        }

        class UnityTextOutlineWidthProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.unityTextOutlineWidth);
            public override string ussName => "-unity-text-outline-width";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).unityTextOutlineWidth;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class UnityTextOverflowPositionProperty : ResolvedEnumProperty<TextOverflowPosition>
        {
            public override string Name => nameof(IResolvedStyle.unityTextOverflowPosition);
            public override string ussName => "-unity-text-overflow-position";
            public override bool IsReadOnly => true;
            public override TextOverflowPosition GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).unityTextOverflowPosition;
            public override void SetValue(ref ResolvedStyleAccess container, TextOverflowPosition value) => throw new System.InvalidOperationException();
        }

        class VisibilityProperty : ResolvedEnumProperty<Visibility>
        {
            public override string Name => nameof(IResolvedStyle.visibility);
            public override string ussName => "visibility";
            public override bool IsReadOnly => true;
            public override Visibility GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).visibility;
            public override void SetValue(ref ResolvedStyleAccess container, Visibility value) => throw new System.InvalidOperationException();
        }

        class WhiteSpaceProperty : ResolvedEnumProperty<WhiteSpace>
        {
            public override string Name => nameof(IResolvedStyle.whiteSpace);
            public override string ussName => "white-space";
            public override bool IsReadOnly => true;
            public override WhiteSpace GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).whiteSpace;
            public override void SetValue(ref ResolvedStyleAccess container, WhiteSpace value) => throw new System.InvalidOperationException();
        }

        class WidthProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.width);
            public override string ussName => "width";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).width;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        class WordSpacingProperty : ResolvedFloatProperty
        {
            public override string Name => nameof(IResolvedStyle.wordSpacing);
            public override string ussName => "word-spacing";
            public override bool IsReadOnly => true;
            public override float GetValue(ref ResolvedStyleAccess container) => ((IResolvedStyle)container).wordSpacing;
            public override void SetValue(ref ResolvedStyleAccess container, float value) => throw new System.InvalidOperationException();
        }

        public ResolvedStyleAccessPropertyBag()
        {
            m_PropertiesList = new List<IProperty<ResolvedStyleAccess>>(80);
            m_PropertiesHash = new Dictionary<string, IProperty<ResolvedStyleAccess>>(240);
            AddProperty(new AlignContentProperty());
            AddProperty(new AlignItemsProperty());
            AddProperty(new AlignSelfProperty());
            AddProperty(new BackgroundColorProperty());
            AddProperty(new BackgroundImageProperty());
            AddProperty(new BackgroundPositionXProperty());
            AddProperty(new BackgroundPositionYProperty());
            AddProperty(new BackgroundRepeatProperty());
            AddProperty(new BackgroundSizeProperty());
            AddProperty(new BorderBottomColorProperty());
            AddProperty(new BorderBottomLeftRadiusProperty());
            AddProperty(new BorderBottomRightRadiusProperty());
            AddProperty(new BorderBottomWidthProperty());
            AddProperty(new BorderLeftColorProperty());
            AddProperty(new BorderLeftWidthProperty());
            AddProperty(new BorderRightColorProperty());
            AddProperty(new BorderRightWidthProperty());
            AddProperty(new BorderTopColorProperty());
            AddProperty(new BorderTopLeftRadiusProperty());
            AddProperty(new BorderTopRightRadiusProperty());
            AddProperty(new BorderTopWidthProperty());
            AddProperty(new BottomProperty());
            AddProperty(new ColorProperty());
            AddProperty(new DisplayProperty());
            AddProperty(new FlexBasisProperty());
            AddProperty(new FlexDirectionProperty());
            AddProperty(new FlexGrowProperty());
            AddProperty(new FlexShrinkProperty());
            AddProperty(new FlexWrapProperty());
            AddProperty(new FontSizeProperty());
            AddProperty(new HeightProperty());
            AddProperty(new JustifyContentProperty());
            AddProperty(new LeftProperty());
            AddProperty(new LetterSpacingProperty());
            AddProperty(new MarginBottomProperty());
            AddProperty(new MarginLeftProperty());
            AddProperty(new MarginRightProperty());
            AddProperty(new MarginTopProperty());
            AddProperty(new MaxHeightProperty());
            AddProperty(new MaxWidthProperty());
            AddProperty(new MinHeightProperty());
            AddProperty(new MinWidthProperty());
            AddProperty(new OpacityProperty());
            AddProperty(new PaddingBottomProperty());
            AddProperty(new PaddingLeftProperty());
            AddProperty(new PaddingRightProperty());
            AddProperty(new PaddingTopProperty());
            AddProperty(new PositionProperty());
            AddProperty(new RightProperty());
            AddProperty(new RotateProperty());
            AddProperty(new ScaleProperty());
            AddProperty(new TextOverflowProperty());
            AddProperty(new TopProperty());
            AddProperty(new TransformOriginProperty());
            AddProperty(new TransitionDelayProperty());
            AddProperty(new TransitionDurationProperty());
            AddProperty(new TransitionPropertyProperty());
            AddProperty(new TransitionTimingFunctionProperty());
            AddProperty(new TranslateProperty());
            AddProperty(new UnityBackgroundImageTintColorProperty());
            AddProperty(new UnityEditorTextRenderingModeProperty());
            AddProperty(new UnityFontProperty());
            AddProperty(new UnityFontDefinitionProperty());
            AddProperty(new UnityFontStyleAndWeightProperty());
            AddProperty(new UnityParagraphSpacingProperty());
            AddProperty(new UnitySliceBottomProperty());
            AddProperty(new UnitySliceLeftProperty());
            AddProperty(new UnitySliceRightProperty());
            AddProperty(new UnitySliceScaleProperty());
            AddProperty(new UnitySliceTopProperty());
            AddProperty(new UnitySliceTypeProperty());
            AddProperty(new UnityTextAlignProperty());
            AddProperty(new UnityTextGeneratorProperty());
            AddProperty(new UnityTextOutlineColorProperty());
            AddProperty(new UnityTextOutlineWidthProperty());
            AddProperty(new UnityTextOverflowPositionProperty());
            AddProperty(new VisibilityProperty());
            AddProperty(new WhiteSpaceProperty());
            AddProperty(new WidthProperty());
            AddProperty(new WordSpacingProperty());
        }
    }
}
